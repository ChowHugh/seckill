// Code generated by entc, DO NOT EDIT.

package seckillgoods

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/helloMJW/seckill/app/order/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GoodsID applies equality check predicate on the "goods_id" field. It's identical to GoodsIDEQ.
func GoodsID(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsID), v))
	})
}

// SeckillPrice applies equality check predicate on the "seckill_price" field. It's identical to SeckillPriceEQ.
func SeckillPrice(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeckillPrice), v))
	})
}

// StockCount applies equality check predicate on the "stock_count" field. It's identical to StockCountEQ.
func StockCount(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockCount), v))
	})
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// GoodsIDEQ applies the EQ predicate on the "goods_id" field.
func GoodsIDEQ(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsID), v))
	})
}

// GoodsIDNEQ applies the NEQ predicate on the "goods_id" field.
func GoodsIDNEQ(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodsID), v))
	})
}

// GoodsIDIn applies the In predicate on the "goods_id" field.
func GoodsIDIn(vs ...int64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoodsID), v...))
	})
}

// GoodsIDNotIn applies the NotIn predicate on the "goods_id" field.
func GoodsIDNotIn(vs ...int64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoodsID), v...))
	})
}

// GoodsIDGT applies the GT predicate on the "goods_id" field.
func GoodsIDGT(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodsID), v))
	})
}

// GoodsIDGTE applies the GTE predicate on the "goods_id" field.
func GoodsIDGTE(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodsID), v))
	})
}

// GoodsIDLT applies the LT predicate on the "goods_id" field.
func GoodsIDLT(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodsID), v))
	})
}

// GoodsIDLTE applies the LTE predicate on the "goods_id" field.
func GoodsIDLTE(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodsID), v))
	})
}

// SeckillPriceEQ applies the EQ predicate on the "seckill_price" field.
func SeckillPriceEQ(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeckillPrice), v))
	})
}

// SeckillPriceNEQ applies the NEQ predicate on the "seckill_price" field.
func SeckillPriceNEQ(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeckillPrice), v))
	})
}

// SeckillPriceIn applies the In predicate on the "seckill_price" field.
func SeckillPriceIn(vs ...float64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeckillPrice), v...))
	})
}

// SeckillPriceNotIn applies the NotIn predicate on the "seckill_price" field.
func SeckillPriceNotIn(vs ...float64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeckillPrice), v...))
	})
}

// SeckillPriceGT applies the GT predicate on the "seckill_price" field.
func SeckillPriceGT(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeckillPrice), v))
	})
}

// SeckillPriceGTE applies the GTE predicate on the "seckill_price" field.
func SeckillPriceGTE(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeckillPrice), v))
	})
}

// SeckillPriceLT applies the LT predicate on the "seckill_price" field.
func SeckillPriceLT(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeckillPrice), v))
	})
}

// SeckillPriceLTE applies the LTE predicate on the "seckill_price" field.
func SeckillPriceLTE(v float64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeckillPrice), v))
	})
}

// StockCountEQ applies the EQ predicate on the "stock_count" field.
func StockCountEQ(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockCount), v))
	})
}

// StockCountNEQ applies the NEQ predicate on the "stock_count" field.
func StockCountNEQ(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStockCount), v))
	})
}

// StockCountIn applies the In predicate on the "stock_count" field.
func StockCountIn(vs ...int64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStockCount), v...))
	})
}

// StockCountNotIn applies the NotIn predicate on the "stock_count" field.
func StockCountNotIn(vs ...int64) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStockCount), v...))
	})
}

// StockCountGT applies the GT predicate on the "stock_count" field.
func StockCountGT(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStockCount), v))
	})
}

// StockCountGTE applies the GTE predicate on the "stock_count" field.
func StockCountGTE(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStockCount), v))
	})
}

// StockCountLT applies the LT predicate on the "stock_count" field.
func StockCountLT(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStockCount), v))
	})
}

// StockCountLTE applies the LTE predicate on the "stock_count" field.
func StockCountLTE(v int64) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStockCount), v))
	})
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.SeckillGoods {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SeckillGoods(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeckillGoods) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeckillGoods) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeckillGoods) predicate.SeckillGoods {
	return predicate.SeckillGoods(func(s *sql.Selector) {
		p(s.Not())
	})
}
