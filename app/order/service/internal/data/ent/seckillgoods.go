// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/peter-wow/seckill/app/order/service/internal/data/ent/seckillgoods"
)

// SeckillGoods is the model entity for the SeckillGoods schema.
type SeckillGoods struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GoodsID holds the value of the "goods_id" field.
	GoodsID int64 `json:"goods_id,omitempty"`
	// SeckillPrice holds the value of the "seckill_price" field.
	SeckillPrice float64 `json:"seckill_price,omitempty"`
	// StockCount holds the value of the "stock_count" field.
	StockCount int64 `json:"stock_count,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeckillGoods) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case seckillgoods.FieldSeckillPrice:
			values[i] = new(sql.NullFloat64)
		case seckillgoods.FieldID, seckillgoods.FieldGoodsID, seckillgoods.FieldStockCount:
			values[i] = new(sql.NullInt64)
		case seckillgoods.FieldStartDate, seckillgoods.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SeckillGoods", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeckillGoods fields.
func (sg *SeckillGoods) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seckillgoods.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sg.ID = int64(value.Int64)
		case seckillgoods.FieldGoodsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goods_id", values[i])
			} else if value.Valid {
				sg.GoodsID = value.Int64
			}
		case seckillgoods.FieldSeckillPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field seckill_price", values[i])
			} else if value.Valid {
				sg.SeckillPrice = value.Float64
			}
		case seckillgoods.FieldStockCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_count", values[i])
			} else if value.Valid {
				sg.StockCount = value.Int64
			}
		case seckillgoods.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				sg.StartDate = value.Time
			}
		case seckillgoods.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				sg.EndDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SeckillGoods.
// Note that you need to call SeckillGoods.Unwrap() before calling this method if this SeckillGoods
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *SeckillGoods) Update() *SeckillGoodsUpdateOne {
	return (&SeckillGoodsClient{config: sg.config}).UpdateOne(sg)
}

// Unwrap unwraps the SeckillGoods entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *SeckillGoods) Unwrap() *SeckillGoods {
	tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeckillGoods is not a transactional entity")
	}
	sg.config.driver = tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *SeckillGoods) String() string {
	var builder strings.Builder
	builder.WriteString("SeckillGoods(")
	builder.WriteString(fmt.Sprintf("id=%v", sg.ID))
	builder.WriteString(", goods_id=")
	builder.WriteString(fmt.Sprintf("%v", sg.GoodsID))
	builder.WriteString(", seckill_price=")
	builder.WriteString(fmt.Sprintf("%v", sg.SeckillPrice))
	builder.WriteString(", stock_count=")
	builder.WriteString(fmt.Sprintf("%v", sg.StockCount))
	builder.WriteString(", start_date=")
	builder.WriteString(sg.StartDate.Format(time.ANSIC))
	builder.WriteString(", end_date=")
	builder.WriteString(sg.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SeckillGoodsSlice is a parsable slice of SeckillGoods.
type SeckillGoodsSlice []*SeckillGoods

func (sg SeckillGoodsSlice) config(cfg config) {
	for _i := range sg {
		sg[_i].config = cfg
	}
}
