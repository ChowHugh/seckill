// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/helloMJW/seckill/app/order/service/internal/data/ent/predicate"
	"github.com/helloMJW/seckill/app/order/service/internal/data/ent/seckillgoods"
)

// SeckillGoodsUpdate is the builder for updating SeckillGoods entities.
type SeckillGoodsUpdate struct {
	config
	hooks    []Hook
	mutation *SeckillGoodsMutation
}

// Where adds a new predicate for the SeckillGoodsUpdate builder.
func (sgu *SeckillGoodsUpdate) Where(ps ...predicate.SeckillGoods) *SeckillGoodsUpdate {
	sgu.mutation.predicates = append(sgu.mutation.predicates, ps...)
	return sgu
}

// SetGoodsID sets the "goods_id" field.
func (sgu *SeckillGoodsUpdate) SetGoodsID(i int64) *SeckillGoodsUpdate {
	sgu.mutation.ResetGoodsID()
	sgu.mutation.SetGoodsID(i)
	return sgu
}

// AddGoodsID adds i to the "goods_id" field.
func (sgu *SeckillGoodsUpdate) AddGoodsID(i int64) *SeckillGoodsUpdate {
	sgu.mutation.AddGoodsID(i)
	return sgu
}

// SetSeckillPrice sets the "seckill_price" field.
func (sgu *SeckillGoodsUpdate) SetSeckillPrice(f float64) *SeckillGoodsUpdate {
	sgu.mutation.ResetSeckillPrice()
	sgu.mutation.SetSeckillPrice(f)
	return sgu
}

// AddSeckillPrice adds f to the "seckill_price" field.
func (sgu *SeckillGoodsUpdate) AddSeckillPrice(f float64) *SeckillGoodsUpdate {
	sgu.mutation.AddSeckillPrice(f)
	return sgu
}

// SetStockCount sets the "stock_count" field.
func (sgu *SeckillGoodsUpdate) SetStockCount(i int64) *SeckillGoodsUpdate {
	sgu.mutation.ResetStockCount()
	sgu.mutation.SetStockCount(i)
	return sgu
}

// AddStockCount adds i to the "stock_count" field.
func (sgu *SeckillGoodsUpdate) AddStockCount(i int64) *SeckillGoodsUpdate {
	sgu.mutation.AddStockCount(i)
	return sgu
}

// SetStartDate sets the "start_date" field.
func (sgu *SeckillGoodsUpdate) SetStartDate(t time.Time) *SeckillGoodsUpdate {
	sgu.mutation.SetStartDate(t)
	return sgu
}

// SetEndDate sets the "end_date" field.
func (sgu *SeckillGoodsUpdate) SetEndDate(t time.Time) *SeckillGoodsUpdate {
	sgu.mutation.SetEndDate(t)
	return sgu
}

// Mutation returns the SeckillGoodsMutation object of the builder.
func (sgu *SeckillGoodsUpdate) Mutation() *SeckillGoodsMutation {
	return sgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *SeckillGoodsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sgu.hooks) == 0 {
		affected, err = sgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeckillGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgu.mutation = mutation
			affected, err = sgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgu.hooks) - 1; i >= 0; i-- {
			mut = sgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *SeckillGoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *SeckillGoodsUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *SeckillGoodsUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sgu *SeckillGoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seckillgoods.Table,
			Columns: seckillgoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seckillgoods.FieldID,
			},
		},
	}
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldGoodsID,
		})
	}
	if value, ok := sgu.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldGoodsID,
		})
	}
	if value, ok := sgu.mutation.SeckillPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seckillgoods.FieldSeckillPrice,
		})
	}
	if value, ok := sgu.mutation.AddedSeckillPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seckillgoods.FieldSeckillPrice,
		})
	}
	if value, ok := sgu.mutation.StockCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldStockCount,
		})
	}
	if value, ok := sgu.mutation.AddedStockCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldStockCount,
		})
	}
	if value, ok := sgu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldStartDate,
		})
	}
	if value, ok := sgu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldEndDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillgoods.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SeckillGoodsUpdateOne is the builder for updating a single SeckillGoods entity.
type SeckillGoodsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeckillGoodsMutation
}

// SetGoodsID sets the "goods_id" field.
func (sguo *SeckillGoodsUpdateOne) SetGoodsID(i int64) *SeckillGoodsUpdateOne {
	sguo.mutation.ResetGoodsID()
	sguo.mutation.SetGoodsID(i)
	return sguo
}

// AddGoodsID adds i to the "goods_id" field.
func (sguo *SeckillGoodsUpdateOne) AddGoodsID(i int64) *SeckillGoodsUpdateOne {
	sguo.mutation.AddGoodsID(i)
	return sguo
}

// SetSeckillPrice sets the "seckill_price" field.
func (sguo *SeckillGoodsUpdateOne) SetSeckillPrice(f float64) *SeckillGoodsUpdateOne {
	sguo.mutation.ResetSeckillPrice()
	sguo.mutation.SetSeckillPrice(f)
	return sguo
}

// AddSeckillPrice adds f to the "seckill_price" field.
func (sguo *SeckillGoodsUpdateOne) AddSeckillPrice(f float64) *SeckillGoodsUpdateOne {
	sguo.mutation.AddSeckillPrice(f)
	return sguo
}

// SetStockCount sets the "stock_count" field.
func (sguo *SeckillGoodsUpdateOne) SetStockCount(i int64) *SeckillGoodsUpdateOne {
	sguo.mutation.ResetStockCount()
	sguo.mutation.SetStockCount(i)
	return sguo
}

// AddStockCount adds i to the "stock_count" field.
func (sguo *SeckillGoodsUpdateOne) AddStockCount(i int64) *SeckillGoodsUpdateOne {
	sguo.mutation.AddStockCount(i)
	return sguo
}

// SetStartDate sets the "start_date" field.
func (sguo *SeckillGoodsUpdateOne) SetStartDate(t time.Time) *SeckillGoodsUpdateOne {
	sguo.mutation.SetStartDate(t)
	return sguo
}

// SetEndDate sets the "end_date" field.
func (sguo *SeckillGoodsUpdateOne) SetEndDate(t time.Time) *SeckillGoodsUpdateOne {
	sguo.mutation.SetEndDate(t)
	return sguo
}

// Mutation returns the SeckillGoodsMutation object of the builder.
func (sguo *SeckillGoodsUpdateOne) Mutation() *SeckillGoodsMutation {
	return sguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *SeckillGoodsUpdateOne) Select(field string, fields ...string) *SeckillGoodsUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated SeckillGoods entity.
func (sguo *SeckillGoodsUpdateOne) Save(ctx context.Context) (*SeckillGoods, error) {
	var (
		err  error
		node *SeckillGoods
	)
	if len(sguo.hooks) == 0 {
		node, err = sguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeckillGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguo.mutation = mutation
			node, err = sguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sguo.hooks) - 1; i >= 0; i-- {
			mut = sguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *SeckillGoodsUpdateOne) SaveX(ctx context.Context) *SeckillGoods {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *SeckillGoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *SeckillGoodsUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sguo *SeckillGoodsUpdateOne) sqlSave(ctx context.Context) (_node *SeckillGoods, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seckillgoods.Table,
			Columns: seckillgoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seckillgoods.FieldID,
			},
		},
	}
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SeckillGoods.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seckillgoods.FieldID)
		for _, f := range fields {
			if !seckillgoods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seckillgoods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldGoodsID,
		})
	}
	if value, ok := sguo.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldGoodsID,
		})
	}
	if value, ok := sguo.mutation.SeckillPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seckillgoods.FieldSeckillPrice,
		})
	}
	if value, ok := sguo.mutation.AddedSeckillPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seckillgoods.FieldSeckillPrice,
		})
	}
	if value, ok := sguo.mutation.StockCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldStockCount,
		})
	}
	if value, ok := sguo.mutation.AddedStockCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldStockCount,
		})
	}
	if value, ok := sguo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldStartDate,
		})
	}
	if value, ok := sguo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldEndDate,
		})
	}
	_node = &SeckillGoods{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillgoods.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
