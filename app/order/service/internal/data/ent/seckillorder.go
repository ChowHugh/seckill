// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/peter-wow/seckill/app/order/service/internal/data/ent/seckillorder"
)

// SeckillOrder is the model entity for the SeckillOrder schema.
type SeckillOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// GoodsID holds the value of the "goods_id" field.
	GoodsID int64 `json:"goods_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeckillOrder) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case seckillorder.FieldID, seckillorder.FieldUserID, seckillorder.FieldOrderID, seckillorder.FieldGoodsID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SeckillOrder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeckillOrder fields.
func (so *SeckillOrder) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seckillorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			so.ID = int64(value.Int64)
		case seckillorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				so.UserID = value.Int64
			}
		case seckillorder.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				so.OrderID = value.Int64
			}
		case seckillorder.FieldGoodsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goods_id", values[i])
			} else if value.Valid {
				so.GoodsID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SeckillOrder.
// Note that you need to call SeckillOrder.Unwrap() before calling this method if this SeckillOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SeckillOrder) Update() *SeckillOrderUpdateOne {
	return (&SeckillOrderClient{config: so.config}).UpdateOne(so)
}

// Unwrap unwraps the SeckillOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SeckillOrder) Unwrap() *SeckillOrder {
	tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeckillOrder is not a transactional entity")
	}
	so.config.driver = tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SeckillOrder) String() string {
	var builder strings.Builder
	builder.WriteString("SeckillOrder(")
	builder.WriteString(fmt.Sprintf("id=%v", so.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", so.UserID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", so.OrderID))
	builder.WriteString(", goods_id=")
	builder.WriteString(fmt.Sprintf("%v", so.GoodsID))
	builder.WriteByte(')')
	return builder.String()
}

// SeckillOrders is a parsable slice of SeckillOrder.
type SeckillOrders []*SeckillOrder

func (so SeckillOrders) config(cfg config) {
	for _i := range so {
		so[_i].config = cfg
	}
}
