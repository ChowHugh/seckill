// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/peter-wow/seckill/app/order/service/internal/data/ent/predicate"
	"github.com/peter-wow/seckill/app/order/service/internal/data/ent/seckillorder"
)

// SeckillOrderUpdate is the builder for updating SeckillOrder entities.
type SeckillOrderUpdate struct {
	config
	hooks    []Hook
	mutation *SeckillOrderMutation
}

// Where adds a new predicate for the SeckillOrderUpdate builder.
func (sou *SeckillOrderUpdate) Where(ps ...predicate.SeckillOrder) *SeckillOrderUpdate {
	sou.mutation.predicates = append(sou.mutation.predicates, ps...)
	return sou
}

// SetUserID sets the "user_id" field.
func (sou *SeckillOrderUpdate) SetUserID(i int64) *SeckillOrderUpdate {
	sou.mutation.ResetUserID()
	sou.mutation.SetUserID(i)
	return sou
}

// AddUserID adds i to the "user_id" field.
func (sou *SeckillOrderUpdate) AddUserID(i int64) *SeckillOrderUpdate {
	sou.mutation.AddUserID(i)
	return sou
}

// SetOrderID sets the "order_id" field.
func (sou *SeckillOrderUpdate) SetOrderID(i int64) *SeckillOrderUpdate {
	sou.mutation.ResetOrderID()
	sou.mutation.SetOrderID(i)
	return sou
}

// AddOrderID adds i to the "order_id" field.
func (sou *SeckillOrderUpdate) AddOrderID(i int64) *SeckillOrderUpdate {
	sou.mutation.AddOrderID(i)
	return sou
}

// SetGoodsID sets the "goods_id" field.
func (sou *SeckillOrderUpdate) SetGoodsID(i int64) *SeckillOrderUpdate {
	sou.mutation.ResetGoodsID()
	sou.mutation.SetGoodsID(i)
	return sou
}

// AddGoodsID adds i to the "goods_id" field.
func (sou *SeckillOrderUpdate) AddGoodsID(i int64) *SeckillOrderUpdate {
	sou.mutation.AddGoodsID(i)
	return sou
}

// Mutation returns the SeckillOrderMutation object of the builder.
func (sou *SeckillOrderUpdate) Mutation() *SeckillOrderMutation {
	return sou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SeckillOrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sou.hooks) == 0 {
		affected, err = sou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeckillOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sou.mutation = mutation
			affected, err = sou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sou.hooks) - 1; i >= 0; i-- {
			mut = sou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SeckillOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SeckillOrderUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SeckillOrderUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sou *SeckillOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seckillorder.Table,
			Columns: seckillorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seckillorder.FieldID,
			},
		},
	}
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldUserID,
		})
	}
	if value, ok := sou.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldUserID,
		})
	}
	if value, ok := sou.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldOrderID,
		})
	}
	if value, ok := sou.mutation.AddedOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldOrderID,
		})
	}
	if value, ok := sou.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldGoodsID,
		})
	}
	if value, ok := sou.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldGoodsID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SeckillOrderUpdateOne is the builder for updating a single SeckillOrder entity.
type SeckillOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeckillOrderMutation
}

// SetUserID sets the "user_id" field.
func (souo *SeckillOrderUpdateOne) SetUserID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.ResetUserID()
	souo.mutation.SetUserID(i)
	return souo
}

// AddUserID adds i to the "user_id" field.
func (souo *SeckillOrderUpdateOne) AddUserID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.AddUserID(i)
	return souo
}

// SetOrderID sets the "order_id" field.
func (souo *SeckillOrderUpdateOne) SetOrderID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.ResetOrderID()
	souo.mutation.SetOrderID(i)
	return souo
}

// AddOrderID adds i to the "order_id" field.
func (souo *SeckillOrderUpdateOne) AddOrderID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.AddOrderID(i)
	return souo
}

// SetGoodsID sets the "goods_id" field.
func (souo *SeckillOrderUpdateOne) SetGoodsID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.ResetGoodsID()
	souo.mutation.SetGoodsID(i)
	return souo
}

// AddGoodsID adds i to the "goods_id" field.
func (souo *SeckillOrderUpdateOne) AddGoodsID(i int64) *SeckillOrderUpdateOne {
	souo.mutation.AddGoodsID(i)
	return souo
}

// Mutation returns the SeckillOrderMutation object of the builder.
func (souo *SeckillOrderUpdateOne) Mutation() *SeckillOrderMutation {
	return souo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SeckillOrderUpdateOne) Select(field string, fields ...string) *SeckillOrderUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SeckillOrder entity.
func (souo *SeckillOrderUpdateOne) Save(ctx context.Context) (*SeckillOrder, error) {
	var (
		err  error
		node *SeckillOrder
	)
	if len(souo.hooks) == 0 {
		node, err = souo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeckillOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			souo.mutation = mutation
			node, err = souo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(souo.hooks) - 1; i >= 0; i-- {
			mut = souo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, souo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SeckillOrderUpdateOne) SaveX(ctx context.Context) *SeckillOrder {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SeckillOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SeckillOrderUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (souo *SeckillOrderUpdateOne) sqlSave(ctx context.Context) (_node *SeckillOrder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seckillorder.Table,
			Columns: seckillorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seckillorder.FieldID,
			},
		},
	}
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SeckillOrder.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seckillorder.FieldID)
		for _, f := range fields {
			if !seckillorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seckillorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := souo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldUserID,
		})
	}
	if value, ok := souo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldUserID,
		})
	}
	if value, ok := souo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldOrderID,
		})
	}
	if value, ok := souo.mutation.AddedOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldOrderID,
		})
	}
	if value, ok := souo.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldGoodsID,
		})
	}
	if value, ok := souo.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillorder.FieldGoodsID,
		})
	}
	_node = &SeckillOrder{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
