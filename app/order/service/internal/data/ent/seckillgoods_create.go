// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/helloMJW/seckill/app/order/service/internal/data/ent/seckillgoods"
)

// SeckillGoodsCreate is the builder for creating a SeckillGoods entity.
type SeckillGoodsCreate struct {
	config
	mutation *SeckillGoodsMutation
	hooks    []Hook
}

// SetGoodsID sets the "goods_id" field.
func (sgc *SeckillGoodsCreate) SetGoodsID(i int64) *SeckillGoodsCreate {
	sgc.mutation.SetGoodsID(i)
	return sgc
}

// SetSeckillPrice sets the "seckill_price" field.
func (sgc *SeckillGoodsCreate) SetSeckillPrice(f float64) *SeckillGoodsCreate {
	sgc.mutation.SetSeckillPrice(f)
	return sgc
}

// SetStockCount sets the "stock_count" field.
func (sgc *SeckillGoodsCreate) SetStockCount(i int64) *SeckillGoodsCreate {
	sgc.mutation.SetStockCount(i)
	return sgc
}

// SetStartDate sets the "start_date" field.
func (sgc *SeckillGoodsCreate) SetStartDate(t time.Time) *SeckillGoodsCreate {
	sgc.mutation.SetStartDate(t)
	return sgc
}

// SetEndDate sets the "end_date" field.
func (sgc *SeckillGoodsCreate) SetEndDate(t time.Time) *SeckillGoodsCreate {
	sgc.mutation.SetEndDate(t)
	return sgc
}

// SetID sets the "id" field.
func (sgc *SeckillGoodsCreate) SetID(i int64) *SeckillGoodsCreate {
	sgc.mutation.SetID(i)
	return sgc
}

// Mutation returns the SeckillGoodsMutation object of the builder.
func (sgc *SeckillGoodsCreate) Mutation() *SeckillGoodsMutation {
	return sgc.mutation
}

// Save creates the SeckillGoods in the database.
func (sgc *SeckillGoodsCreate) Save(ctx context.Context) (*SeckillGoods, error) {
	var (
		err  error
		node *SeckillGoods
	)
	if len(sgc.hooks) == 0 {
		if err = sgc.check(); err != nil {
			return nil, err
		}
		node, err = sgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeckillGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgc.check(); err != nil {
				return nil, err
			}
			sgc.mutation = mutation
			node, err = sgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgc.hooks) - 1; i >= 0; i-- {
			mut = sgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *SeckillGoodsCreate) SaveX(ctx context.Context) *SeckillGoods {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sgc *SeckillGoodsCreate) check() error {
	if _, ok := sgc.mutation.GoodsID(); !ok {
		return &ValidationError{Name: "goods_id", err: errors.New("ent: missing required field \"goods_id\"")}
	}
	if _, ok := sgc.mutation.SeckillPrice(); !ok {
		return &ValidationError{Name: "seckill_price", err: errors.New("ent: missing required field \"seckill_price\"")}
	}
	if _, ok := sgc.mutation.StockCount(); !ok {
		return &ValidationError{Name: "stock_count", err: errors.New("ent: missing required field \"stock_count\"")}
	}
	if _, ok := sgc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New("ent: missing required field \"start_date\"")}
	}
	if _, ok := sgc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New("ent: missing required field \"end_date\"")}
	}
	return nil
}

func (sgc *SeckillGoodsCreate) sqlSave(ctx context.Context) (*SeckillGoods, error) {
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sgc *SeckillGoodsCreate) createSpec() (*SeckillGoods, *sqlgraph.CreateSpec) {
	var (
		_node = &SeckillGoods{config: sgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: seckillgoods.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: seckillgoods.FieldID,
			},
		}
	)
	if id, ok := sgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sgc.mutation.GoodsID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldGoodsID,
		})
		_node.GoodsID = value
	}
	if value, ok := sgc.mutation.SeckillPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seckillgoods.FieldSeckillPrice,
		})
		_node.SeckillPrice = value
	}
	if value, ok := sgc.mutation.StockCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: seckillgoods.FieldStockCount,
		})
		_node.StockCount = value
	}
	if value, ok := sgc.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldStartDate,
		})
		_node.StartDate = value
	}
	if value, ok := sgc.mutation.EndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seckillgoods.FieldEndDate,
		})
		_node.EndDate = value
	}
	return _node, _spec
}

// SeckillGoodsCreateBulk is the builder for creating many SeckillGoods entities in bulk.
type SeckillGoodsCreateBulk struct {
	config
	builders []*SeckillGoodsCreate
}

// Save creates the SeckillGoods entities in the database.
func (sgcb *SeckillGoodsCreateBulk) Save(ctx context.Context) ([]*SeckillGoods, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*SeckillGoods, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeckillGoodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *SeckillGoodsCreateBulk) SaveX(ctx context.Context) []*SeckillGoods {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
