// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/peter-wow/seckill/app/goods/service/internal/data/ent/ordergoods"
	"github.com/peter-wow/seckill/app/goods/service/internal/data/ent/predicate"
)

// OrderGoodsUpdate is the builder for updating OrderGoods entities.
type OrderGoodsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderGoodsMutation
}

// Where adds a new predicate for the OrderGoodsUpdate builder.
func (ogu *OrderGoodsUpdate) Where(ps ...predicate.OrderGoods) *OrderGoodsUpdate {
	ogu.mutation.predicates = append(ogu.mutation.predicates, ps...)
	return ogu
}

// SetOrderID sets the "order_id" field.
func (ogu *OrderGoodsUpdate) SetOrderID(i int64) *OrderGoodsUpdate {
	ogu.mutation.ResetOrderID()
	ogu.mutation.SetOrderID(i)
	return ogu
}

// AddOrderID adds i to the "order_id" field.
func (ogu *OrderGoodsUpdate) AddOrderID(i int64) *OrderGoodsUpdate {
	ogu.mutation.AddOrderID(i)
	return ogu
}

// SetGoodsID sets the "goods_id" field.
func (ogu *OrderGoodsUpdate) SetGoodsID(i int64) *OrderGoodsUpdate {
	ogu.mutation.ResetGoodsID()
	ogu.mutation.SetGoodsID(i)
	return ogu
}

// AddGoodsID adds i to the "goods_id" field.
func (ogu *OrderGoodsUpdate) AddGoodsID(i int64) *OrderGoodsUpdate {
	ogu.mutation.AddGoodsID(i)
	return ogu
}

// SetGoodsTitle sets the "goods_title" field.
func (ogu *OrderGoodsUpdate) SetGoodsTitle(s string) *OrderGoodsUpdate {
	ogu.mutation.SetGoodsTitle(s)
	return ogu
}

// SetCreatedAt sets the "created_at" field.
func (ogu *OrderGoodsUpdate) SetCreatedAt(t time.Time) *OrderGoodsUpdate {
	ogu.mutation.SetCreatedAt(t)
	return ogu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ogu *OrderGoodsUpdate) SetNillableCreatedAt(t *time.Time) *OrderGoodsUpdate {
	if t != nil {
		ogu.SetCreatedAt(*t)
	}
	return ogu
}

// SetUpdatedAt sets the "updated_at" field.
func (ogu *OrderGoodsUpdate) SetUpdatedAt(t time.Time) *OrderGoodsUpdate {
	ogu.mutation.SetUpdatedAt(t)
	return ogu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ogu *OrderGoodsUpdate) SetNillableUpdatedAt(t *time.Time) *OrderGoodsUpdate {
	if t != nil {
		ogu.SetUpdatedAt(*t)
	}
	return ogu
}

// Mutation returns the OrderGoodsMutation object of the builder.
func (ogu *OrderGoodsUpdate) Mutation() *OrderGoodsMutation {
	return ogu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ogu *OrderGoodsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ogu.hooks) == 0 {
		affected, err = ogu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ogu.mutation = mutation
			affected, err = ogu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ogu.hooks) - 1; i >= 0; i-- {
			mut = ogu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ogu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ogu *OrderGoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := ogu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ogu *OrderGoodsUpdate) Exec(ctx context.Context) error {
	_, err := ogu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ogu *OrderGoodsUpdate) ExecX(ctx context.Context) {
	if err := ogu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ogu *OrderGoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordergoods.Table,
			Columns: ordergoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordergoods.FieldID,
			},
		},
	}
	if ps := ogu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ogu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldOrderID,
		})
	}
	if value, ok := ogu.mutation.AddedOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldOrderID,
		})
	}
	if value, ok := ogu.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldGoodsID,
		})
	}
	if value, ok := ogu.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldGoodsID,
		})
	}
	if value, ok := ogu.mutation.GoodsTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoods.FieldGoodsTitle,
		})
	}
	if value, ok := ogu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldCreatedAt,
		})
	}
	if value, ok := ogu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ogu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordergoods.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderGoodsUpdateOne is the builder for updating a single OrderGoods entity.
type OrderGoodsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderGoodsMutation
}

// SetOrderID sets the "order_id" field.
func (oguo *OrderGoodsUpdateOne) SetOrderID(i int64) *OrderGoodsUpdateOne {
	oguo.mutation.ResetOrderID()
	oguo.mutation.SetOrderID(i)
	return oguo
}

// AddOrderID adds i to the "order_id" field.
func (oguo *OrderGoodsUpdateOne) AddOrderID(i int64) *OrderGoodsUpdateOne {
	oguo.mutation.AddOrderID(i)
	return oguo
}

// SetGoodsID sets the "goods_id" field.
func (oguo *OrderGoodsUpdateOne) SetGoodsID(i int64) *OrderGoodsUpdateOne {
	oguo.mutation.ResetGoodsID()
	oguo.mutation.SetGoodsID(i)
	return oguo
}

// AddGoodsID adds i to the "goods_id" field.
func (oguo *OrderGoodsUpdateOne) AddGoodsID(i int64) *OrderGoodsUpdateOne {
	oguo.mutation.AddGoodsID(i)
	return oguo
}

// SetGoodsTitle sets the "goods_title" field.
func (oguo *OrderGoodsUpdateOne) SetGoodsTitle(s string) *OrderGoodsUpdateOne {
	oguo.mutation.SetGoodsTitle(s)
	return oguo
}

// SetCreatedAt sets the "created_at" field.
func (oguo *OrderGoodsUpdateOne) SetCreatedAt(t time.Time) *OrderGoodsUpdateOne {
	oguo.mutation.SetCreatedAt(t)
	return oguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oguo *OrderGoodsUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderGoodsUpdateOne {
	if t != nil {
		oguo.SetCreatedAt(*t)
	}
	return oguo
}

// SetUpdatedAt sets the "updated_at" field.
func (oguo *OrderGoodsUpdateOne) SetUpdatedAt(t time.Time) *OrderGoodsUpdateOne {
	oguo.mutation.SetUpdatedAt(t)
	return oguo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oguo *OrderGoodsUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrderGoodsUpdateOne {
	if t != nil {
		oguo.SetUpdatedAt(*t)
	}
	return oguo
}

// Mutation returns the OrderGoodsMutation object of the builder.
func (oguo *OrderGoodsUpdateOne) Mutation() *OrderGoodsMutation {
	return oguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oguo *OrderGoodsUpdateOne) Select(field string, fields ...string) *OrderGoodsUpdateOne {
	oguo.fields = append([]string{field}, fields...)
	return oguo
}

// Save executes the query and returns the updated OrderGoods entity.
func (oguo *OrderGoodsUpdateOne) Save(ctx context.Context) (*OrderGoods, error) {
	var (
		err  error
		node *OrderGoods
	)
	if len(oguo.hooks) == 0 {
		node, err = oguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oguo.mutation = mutation
			node, err = oguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oguo.hooks) - 1; i >= 0; i-- {
			mut = oguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oguo *OrderGoodsUpdateOne) SaveX(ctx context.Context) *OrderGoods {
	node, err := oguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oguo *OrderGoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := oguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oguo *OrderGoodsUpdateOne) ExecX(ctx context.Context) {
	if err := oguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oguo *OrderGoodsUpdateOne) sqlSave(ctx context.Context) (_node *OrderGoods, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordergoods.Table,
			Columns: ordergoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordergoods.FieldID,
			},
		},
	}
	id, ok := oguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderGoods.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordergoods.FieldID)
		for _, f := range fields {
			if !ordergoods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordergoods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oguo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldOrderID,
		})
	}
	if value, ok := oguo.mutation.AddedOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldOrderID,
		})
	}
	if value, ok := oguo.mutation.GoodsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldGoodsID,
		})
	}
	if value, ok := oguo.mutation.AddedGoodsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldGoodsID,
		})
	}
	if value, ok := oguo.mutation.GoodsTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoods.FieldGoodsTitle,
		})
	}
	if value, ok := oguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldCreatedAt,
		})
	}
	if value, ok := oguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldUpdatedAt,
		})
	}
	_node = &OrderGoods{config: oguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordergoods.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
