// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/peter-wow/seckill/app/goods/service/internal/data/ent/ordergoods"
)

// OrderGoods is the model entity for the OrderGoods schema.
type OrderGoods struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// GoodsID holds the value of the "goods_id" field.
	GoodsID int64 `json:"goods_id,omitempty"`
	// GoodsTitle holds the value of the "goods_title" field.
	GoodsTitle string `json:"goods_title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderGoods) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordergoods.FieldID, ordergoods.FieldOrderID, ordergoods.FieldGoodsID:
			values[i] = new(sql.NullInt64)
		case ordergoods.FieldGoodsTitle:
			values[i] = new(sql.NullString)
		case ordergoods.FieldCreatedAt, ordergoods.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderGoods", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderGoods fields.
func (og *OrderGoods) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordergoods.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			og.ID = int64(value.Int64)
		case ordergoods.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				og.OrderID = value.Int64
			}
		case ordergoods.FieldGoodsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goods_id", values[i])
			} else if value.Valid {
				og.GoodsID = value.Int64
			}
		case ordergoods.FieldGoodsTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goods_title", values[i])
			} else if value.Valid {
				og.GoodsTitle = value.String
			}
		case ordergoods.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				og.CreatedAt = value.Time
			}
		case ordergoods.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				og.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderGoods.
// Note that you need to call OrderGoods.Unwrap() before calling this method if this OrderGoods
// was returned from a transaction, and the transaction was committed or rolled back.
func (og *OrderGoods) Update() *OrderGoodsUpdateOne {
	return (&OrderGoodsClient{config: og.config}).UpdateOne(og)
}

// Unwrap unwraps the OrderGoods entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (og *OrderGoods) Unwrap() *OrderGoods {
	tx, ok := og.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderGoods is not a transactional entity")
	}
	og.config.driver = tx.drv
	return og
}

// String implements the fmt.Stringer.
func (og *OrderGoods) String() string {
	var builder strings.Builder
	builder.WriteString("OrderGoods(")
	builder.WriteString(fmt.Sprintf("id=%v", og.ID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", og.OrderID))
	builder.WriteString(", goods_id=")
	builder.WriteString(fmt.Sprintf("%v", og.GoodsID))
	builder.WriteString(", goods_title=")
	builder.WriteString(og.GoodsTitle)
	builder.WriteString(", created_at=")
	builder.WriteString(og.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(og.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderGoodsSlice is a parsable slice of OrderGoods.
type OrderGoodsSlice []*OrderGoods

func (og OrderGoodsSlice) config(cfg config) {
	for _i := range og {
		og[_i].config = cfg
	}
}
