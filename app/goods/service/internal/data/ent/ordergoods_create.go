// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/peter-wow/seckill/app/goods/service/internal/data/ent/ordergoods"
)

// OrderGoodsCreate is the builder for creating a OrderGoods entity.
type OrderGoodsCreate struct {
	config
	mutation *OrderGoodsMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (ogc *OrderGoodsCreate) SetOrderID(i int64) *OrderGoodsCreate {
	ogc.mutation.SetOrderID(i)
	return ogc
}

// SetGoodsID sets the "goods_id" field.
func (ogc *OrderGoodsCreate) SetGoodsID(i int64) *OrderGoodsCreate {
	ogc.mutation.SetGoodsID(i)
	return ogc
}

// SetGoodsTitle sets the "goods_title" field.
func (ogc *OrderGoodsCreate) SetGoodsTitle(s string) *OrderGoodsCreate {
	ogc.mutation.SetGoodsTitle(s)
	return ogc
}

// SetCreatedAt sets the "created_at" field.
func (ogc *OrderGoodsCreate) SetCreatedAt(t time.Time) *OrderGoodsCreate {
	ogc.mutation.SetCreatedAt(t)
	return ogc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ogc *OrderGoodsCreate) SetNillableCreatedAt(t *time.Time) *OrderGoodsCreate {
	if t != nil {
		ogc.SetCreatedAt(*t)
	}
	return ogc
}

// SetUpdatedAt sets the "updated_at" field.
func (ogc *OrderGoodsCreate) SetUpdatedAt(t time.Time) *OrderGoodsCreate {
	ogc.mutation.SetUpdatedAt(t)
	return ogc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ogc *OrderGoodsCreate) SetNillableUpdatedAt(t *time.Time) *OrderGoodsCreate {
	if t != nil {
		ogc.SetUpdatedAt(*t)
	}
	return ogc
}

// SetID sets the "id" field.
func (ogc *OrderGoodsCreate) SetID(i int64) *OrderGoodsCreate {
	ogc.mutation.SetID(i)
	return ogc
}

// Mutation returns the OrderGoodsMutation object of the builder.
func (ogc *OrderGoodsCreate) Mutation() *OrderGoodsMutation {
	return ogc.mutation
}

// Save creates the OrderGoods in the database.
func (ogc *OrderGoodsCreate) Save(ctx context.Context) (*OrderGoods, error) {
	var (
		err  error
		node *OrderGoods
	)
	ogc.defaults()
	if len(ogc.hooks) == 0 {
		if err = ogc.check(); err != nil {
			return nil, err
		}
		node, err = ogc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderGoodsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ogc.check(); err != nil {
				return nil, err
			}
			ogc.mutation = mutation
			node, err = ogc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ogc.hooks) - 1; i >= 0; i-- {
			mut = ogc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ogc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ogc *OrderGoodsCreate) SaveX(ctx context.Context) *OrderGoods {
	v, err := ogc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ogc *OrderGoodsCreate) defaults() {
	if _, ok := ogc.mutation.CreatedAt(); !ok {
		v := ordergoods.DefaultCreatedAt()
		ogc.mutation.SetCreatedAt(v)
	}
	if _, ok := ogc.mutation.UpdatedAt(); !ok {
		v := ordergoods.DefaultUpdatedAt()
		ogc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ogc *OrderGoodsCreate) check() error {
	if _, ok := ogc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New("ent: missing required field \"order_id\"")}
	}
	if _, ok := ogc.mutation.GoodsID(); !ok {
		return &ValidationError{Name: "goods_id", err: errors.New("ent: missing required field \"goods_id\"")}
	}
	if _, ok := ogc.mutation.GoodsTitle(); !ok {
		return &ValidationError{Name: "goods_title", err: errors.New("ent: missing required field \"goods_title\"")}
	}
	if _, ok := ogc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ogc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (ogc *OrderGoodsCreate) sqlSave(ctx context.Context) (*OrderGoods, error) {
	_node, _spec := ogc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ogc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ogc *OrderGoodsCreate) createSpec() (*OrderGoods, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderGoods{config: ogc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordergoods.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordergoods.FieldID,
			},
		}
	)
	if id, ok := ogc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ogc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := ogc.mutation.GoodsID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ordergoods.FieldGoodsID,
		})
		_node.GoodsID = value
	}
	if value, ok := ogc.mutation.GoodsTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordergoods.FieldGoodsTitle,
		})
		_node.GoodsTitle = value
	}
	if value, ok := ogc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ogc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordergoods.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OrderGoodsCreateBulk is the builder for creating many OrderGoods entities in bulk.
type OrderGoodsCreateBulk struct {
	config
	builders []*OrderGoodsCreate
}

// Save creates the OrderGoods entities in the database.
func (ogcb *OrderGoodsCreateBulk) Save(ctx context.Context) ([]*OrderGoods, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ogcb.builders))
	nodes := make([]*OrderGoods, len(ogcb.builders))
	mutators := make([]Mutator, len(ogcb.builders))
	for i := range ogcb.builders {
		func(i int, root context.Context) {
			builder := ogcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderGoodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ogcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ogcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ogcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ogcb *OrderGoodsCreateBulk) SaveX(ctx context.Context) []*OrderGoods {
	v, err := ogcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
