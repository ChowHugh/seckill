// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type UserHandler interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)

	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)

	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)

	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)

	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
}

func NewUserHandler(srv UserHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/user", func(w http.ResponseWriter, r *http.Request) {
		var in CreateUserRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.user.service.v1.User/UpdateUser", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateUserRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.user.service.v1.User/DeleteUser", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteUserRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetUserRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/api.user.service.v1.User/ListUser", func(w http.ResponseWriter, r *http.Request) {
		var in ListUserRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type UserHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http1.CallOption) (rsp *CreateUserReply, err error)

	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http1.CallOption) (rsp *DeleteUserReply, err error)

	GetUser(ctx context.Context, req *GetUserRequest, opts ...http1.CallOption) (rsp *GetUserReply, err error)

	ListUser(ctx context.Context, req *ListUserRequest, opts ...http1.CallOption) (rsp *ListUserReply, err error)

	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http1.CallOption) (rsp *UpdateUserReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http1.Client
}

func NewUserHTTPClient(client *http1.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http1.CallOption) (out *CreateUserReply, err error) {
	path := binding.EncodePath("POST", "/user", in)
	out = &CreateUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user"))

	return
}

func (c *UserHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http1.CallOption) (out *DeleteUserReply, err error) {
	path := binding.EncodePath("POST", "/api.user.service.v1.User/DeleteUser", in)
	out = &DeleteUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.user.service.v1.User/DeleteUser"))

	return
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http1.CallOption) (out *GetUserReply, err error) {
	path := binding.EncodePath("GET", "/user/{id}", in)
	out = &GetUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/user/{id}"))

	return
}

func (c *UserHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http1.CallOption) (out *ListUserReply, err error) {
	path := binding.EncodePath("POST", "/api.user.service.v1.User/ListUser", in)
	out = &ListUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.user.service.v1.User/ListUser"))

	return
}

func (c *UserHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http1.CallOption) (out *UpdateUserReply, err error) {
	path := binding.EncodePath("POST", "/api.user.service.v1.User/UpdateUser", in)
	out = &UpdateUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.user.service.v1.User/UpdateUser"))

	return
}
