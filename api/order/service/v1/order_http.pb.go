// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type OrderHandler interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)

	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderReply, error)

	GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error)

	ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error)

	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error)
}

func NewOrderHandler(srv OrderHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/order", func(w http.ResponseWriter, r *http.Request) {
		var in CreateOrderRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.order.service.v1.Order/UpdateOrder", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateOrderRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrder(ctx, req.(*UpdateOrderRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.order.service.v1.Order/DeleteOrder", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteOrderRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrder(ctx, req.(*DeleteOrderRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.order.service.v1.Order/GetOrder", func(w http.ResponseWriter, r *http.Request) {
		var in GetOrderRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.order.service.v1.Order/ListOrder", func(w http.ResponseWriter, r *http.Request) {
		var in ListOrderRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListOrderReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type OrderHTTPClient interface {
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http1.CallOption) (rsp *CreateOrderReply, err error)

	DeleteOrder(ctx context.Context, req *DeleteOrderRequest, opts ...http1.CallOption) (rsp *DeleteOrderReply, err error)

	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http1.CallOption) (rsp *GetOrderReply, err error)

	ListOrder(ctx context.Context, req *ListOrderRequest, opts ...http1.CallOption) (rsp *ListOrderReply, err error)

	UpdateOrder(ctx context.Context, req *UpdateOrderRequest, opts ...http1.CallOption) (rsp *UpdateOrderReply, err error)
}

type OrderHTTPClientImpl struct {
	cc *http1.Client
}

func NewOrderHTTPClient(client *http1.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

func (c *OrderHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http1.CallOption) (out *CreateOrderReply, err error) {
	path := binding.EncodePath("POST", "/order", in)
	out = &CreateOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/order"))

	return
}

func (c *OrderHTTPClientImpl) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...http1.CallOption) (out *DeleteOrderReply, err error) {
	path := binding.EncodePath("POST", "/api.order.service.v1.Order/DeleteOrder", in)
	out = &DeleteOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.order.service.v1.Order/DeleteOrder"))

	return
}

func (c *OrderHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http1.CallOption) (out *GetOrderReply, err error) {
	path := binding.EncodePath("POST", "/api.order.service.v1.Order/GetOrder", in)
	out = &GetOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.order.service.v1.Order/GetOrder"))

	return
}

func (c *OrderHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...http1.CallOption) (out *ListOrderReply, err error) {
	path := binding.EncodePath("POST", "/api.order.service.v1.Order/ListOrder", in)
	out = &ListOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.order.service.v1.Order/ListOrder"))

	return
}

func (c *OrderHTTPClientImpl) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...http1.CallOption) (out *UpdateOrderReply, err error) {
	path := binding.EncodePath("POST", "/api.order.service.v1.Order/UpdateOrder", in)
	out = &UpdateOrderReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.order.service.v1.Order/UpdateOrder"))

	return
}
